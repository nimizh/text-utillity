{"version":3,"sources":["Components/Navbar.js","Components/TextFrom.js","Components/Alerts.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","heading","onClick","toggleMode","htmlFor","text","TextFrom","useState","setText","style","color","subheading","value","rows","onChange","event","target","backgroundColor","newText","toUpperCase","showAlert","toLowerCase","replace","split","join","length","defaultProps","Alerts","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","settext","setalert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8f53f91b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"/\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                {props.heading}\r\n              </a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"/about\">\r\n                About\r\n              </a>\r\n            </li> */}\r\n          </ul>\r\n          {/* <form className=\"d-flex\">\r\n              <input\r\n                className=\"form-control me-2\"\r\n                type=\"search\"\r\n                placeholder=\"Search\"\r\n                aria-label=\"Search\"\r\n              />\r\n              <button className=\"btn btn-outline-success\" type=\"submit\">\r\n                Search\r\n              </button>\r\n            </form> */}\r\n          <div\r\n            className={`form-check form-switch text-${\r\n              props.mode === \"dark\" ? \"light\" : \"dark\"\r\n            }`}\r\n          >\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              id=\"flexSwitchCheckDefault\"\r\n              onClick={props.toggleMode}\r\n            />\r\n            <label\r\n              className=\"form-check-label\"\r\n              htmlFor=\"flexSwitchCheckDefault\"\r\n            >\r\n              {props.text}\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\n// To set the Navbar props types to take it value whether numbers, string, object. If I have setted the prop type here string and if i try to pass integer value in APP.JS it will throw an error\r\n\r\n//isRequired is that we have to either pass a value in App.js or we have to set value in defaultProps. If not then it will throw error.\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  heading: PropTypes.string,\r\n};\r\n\r\n// To set a default property if I am have not passed the value in App.Js\r\nNavbar.defaultProps = {\r\n  title: \"Enter the title here\",\r\n  heading: \"Enter the heading here\",\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useState } from \"react\";\r\n\r\nexport default function TextFrom(props) {\r\n  const handleUpClick = () => {\r\n    // console.log(\"uPPER CASE BUTTON IS FIRED\");\r\n    const newText = text.toUpperCase();\r\n    // to change the text as we we click the button\r\n    setText(newText);\r\n    props.showAlert(\"Text is converted into UpperCase\", \"success\");\r\n  };\r\n\r\n  const handleDownClick = () => {\r\n    const newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Your text is converted into LowerCase\", \"success\");\r\n  };\r\n\r\n  const handleReplace = () => {\r\n    const newText = text.replace(text, \"This is your new text\");\r\n    // console.log(\"text must be changed now\");\r\n    setText(newText);\r\n    props.showAlert(\"Your text is replaced\", \"success\");\r\n  };\r\n\r\n  const handleClear = () => {\r\n    const newText = text.replace(text, \"\");\r\n    setText(newText);\r\n    props.showAlert(\"Your text is cleared\", \"success\");\r\n  };\r\n\r\n  const handleSpaces = () => {\r\n    const newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"your extra spaces is handled\", \"success\");\r\n  };\r\n  const handleOnChange = (event) => {\r\n    // console.log(\"handling on change\");\r\n    //  to let us write in the textarea we have to update the value for settext else it wont let us wriote there\r\n    setText(event.target.value);\r\n  };\r\n  // States in React\r\n  const [text, setText] = useState(\"Enter your text here\");\r\n  // here default value for text is 'Enter your text here\" now if i want to change or overwrite it\r\n  // I cannot do text =\"nimish\"\r\n  // I have to target setText Value\r\n  // i.e setText(\"My new text value is this\")\r\n  //\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"#042743\" }}\r\n      >\r\n        <h1>{props.subheading}</h1>\r\n\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            value={text}\r\n            id=\"mybox\"\r\n            rows=\"8\"\r\n            onChange={handleOnChange}\r\n            style={{\r\n              backgroundColor: props.mode === \"dark\" ? \"grey\" : \"white\",\r\n              color: props.mode === \"dark\" ? \"#042743\" : \"black\",\r\n            }}\r\n          ></textarea>\r\n          <button className=\"btn btn-primary mx-2 my-3\" onClick={handleUpClick}>\r\n            Click to convert to Upper Case\r\n          </button>\r\n          <button className=\"btn btn-primary mx-2\" onClick={handleDownClick}>\r\n            Click to convert to lower Case\r\n          </button>\r\n          <button className=\"btn btn-primary mx-2\" onClick={handleReplace}>\r\n            Click to replace the statement\r\n          </button>\r\n          <button className=\"btn btn-primary mx-2\" onClick={handleClear}>\r\n            Click to clear.\r\n          </button>\r\n          <button className=\"btn btn-primary mx-2 my-2\" onClick={handleSpaces}>\r\n            Click to manage extra Spaces\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div\r\n        className=\"container my-3\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"#042743\" }}\r\n      >\r\n        <h2>Your Text Summary</h2>\r\n        <p>\r\n          {text.split(\" \").length} words and {text.length} charcaters.\r\n        </p>\r\n        <p>{0.008 * text.split(\" \").length} minutes to read</p>\r\n        <h3>Preview</h3>\r\n        <p>{text.length > 0 ? text : \"Enter something to preview\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Alerts(props) {\r\n  // To capitalize the first letter of alphabet\r\n  const capitalize = (word) => {\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  };\r\n  return (\r\n    // as prop.alert is initalised at null therefore we will use the syntax props.alert && which shows that first props.alert will be evaluated if it is true then it will move forward otherwise if its false it wont.\r\n    props.alert && (\r\n      <div\r\n        className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n        role=\"alert\"\r\n      >\r\n        <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn-close\"\r\n          data-bs-dismiss=\"alert\"\r\n          aria-label=\"Close\"\r\n        ></button>\r\n      </div>\r\n    )\r\n  );\r\n}\r\n\r\nexport default Alerts;\r\n","import \"./App.css\";\nimport Navbar from \"./Components/Navbar\";\n\nimport React, { useState } from \"react\";\nimport TextFrom from \"./Components/TextFrom\";\nimport Alerts from \"./Components/Alerts\";\n// import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";2\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\"); // Which mode is to be enable\n  const [text, settext] = useState(\"Enable Dark mode\");\n  const [alert, setalert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setalert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setalert(null);\n    }, 1500);\n  };\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      settext(\"Enable Light mode\");\n      document.body.style.backgroundColor = \"#042743\";\n      showAlert(\"Dark mode has been enabled\", \"success\");\n    } else {\n      setMode(\"light\");\n      settext(\"Enable Dark Mode\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled\", \"success\");\n    }\n  };\n\n  return (\n    <>\n      {/* <Router> */}\n      <Navbar\n        title=\"Text Utlities\"\n        heading=\"Application\"\n        mode={mode}\n        toggleMode={toggleMode}\n        text={text}\n      />\n      <Alerts alert={alert} />\n      <div className=\"container my-3\">\n        {/* <Switch> */}\n        {/* <Route exact path=\"/about\"> */}\n        {/* <About /> */}\n        {/* </Route> */}\n        {/* exact will let reaact do exact matching and without exact will be partialmatching by react */}\n        {/* <Route exact path=\"/\"> */}\n        <TextFrom\n          showAlert={showAlert}\n          subheading=\"Enter your title here\"\n          mode={mode}\n        />\n        {/* </Route> */}\n        {/* </Switch> */}\n      </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}